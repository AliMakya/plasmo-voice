buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        mavenCentral()
        // Mixin
        maven { url='https://repo.spongepowered.org/maven' }
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        // Mixin
        classpath 'org.spongepowered:mixingradle:0.7-SNAPSHOT'

    }
}

plugins {
    id "com.github.johnrengelman.shadow" version "4.0.4"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = '1.0.3'
group = "su.plo.voice" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'plasmovoice-forge'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8'

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))
minecraft {
    mappings channel: 'official', version: '1.16.5'

    runs {
        client {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Mixin
            arg "-mixin.config=plasmovoice.mixins.json"

            mods {
                plasmovoice {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')

            property 'forge.logging.markers', 'REGISTRIES'

            property 'forge.logging.console.level', 'debug'

            // Mixin
            arg "-mixin.config=plasmovoice.mixins.json"

            mods {
                plasmovoice {
                    source sourceSets.main
                }
            }
        }

//        data {
//            workingDirectory project.file('run')
//
//            property 'forge.logging.markers', 'REGISTRIES'
//
//            property 'forge.logging.console.level', 'debug'
//
//            args '--mod', 'plasmovoice', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')
//
//            // Mixin
//            arg "-mixin.config=voice.mixins.json"
//
//            mods {
//                plasmovoice {
//                    source sourceSets.main
//                }
//            }
//        }
    }
}

// Include resources generated by data generators.
// sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    maven {
        url "https://repo.plo.su"
    }
    jcenter()
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.1.0'

    implementation "su.plo.voice:common:1.0.0"
    shadow "su.plo.voice:common:1.0.0"

    implementation "club.minnced:opus-java:1.0.4"
    shadow "club.minnced:opus-java:1.0.4"

    implementation "club.minnced:opus-java-api:1.0.5"
    shadow "club.minnced:opus-java-api:1.0.5"

    implementation "club.minnced:opus-java-natives:1.0.5"
    shadow "club.minnced:opus-java-natives:1.0.5"

}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Specification-Title": "plasmovoice",
            "Specification-Vendor": "Plasmo",
            "Specification-Version": "1",
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"Plasmo",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            // Mixin
            "MixinConfigs": "plasmovoice.mixins.json"
        ])
    }
}

shadowJar {
    configurations = [project.configurations.shadow]
    classifier ''
    relocate "club.minnced.opus", "su.plo.voice.opus"
    relocate "tomp2p.opuswrapper", "su.plo.voice.opuswrapper"
    dependencies {
        exclude(dependency("net.java.dev.jna:jna:4.4.0'"))
        exclude(dependency("club.minnced:opus-java:1.0.4"))
    }
}

reobf {
    shadowJar {}
}

//jar.finalizedBy('reobfJar')
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}
publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "https://repo.plo.su"
        }
    }
}

apply plugin: 'org.spongepowered.mixin'

mixin {
    add sourceSets.main, "plasmovoice.refmap.json"
}